<%- include('header.ejs') %>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }

        #canvasContainer {
            display: inline-block;
            position: relative;
            background-color: white;
        }

        canvas {
            border: 1px solid #ccc;
            cursor: crosshair;
        }

        #sideButtons {
            position: absolute;
            top: 50%;
            right: -60px;
            width: 50px;
            color: white;
            font-size: 14px;
            cursor: pointer;
            transform: translateY(-50%);
        }

        #feedContainer {
            width: 400px;
            height: 300px;
            padding: 0;
            margin: 20px auto;
            border: 1px solid #ccc;
            overflow-y: scroll;
            background-color: white;
            overflow-x: hidden;
        }

        #feed {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }

        .drawing {
            margin: 10px auto;
            border: 1px solid #ccc;
            position: relative;
            margin: 0;
            padding: 0;
        }

        .drawing .username {
            font-weight: bold;
            background-color: white;
            color: black;
            border: 0.5px solid black;
            padding: 5px;
            border-radius: 5px;
            position: absolute;
            top: 1px;
            left: 15px;
        }

        .drawing .username p {
            margin: 0;
            padding: 0;
        }
    </style>
    <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
    </head>

    <body>
        <div id="feedContainer">
            <div id="feed"></div>
        </div>
        <div id="canvasContainer">
            <canvas id="drawingCanvas" width="350" height="200"></canvas>
            <div id="sideButtons">
                <button id="sendButton">Send</button>
                <button id="clearButton">Clear</button>
                <button id="leaveButton" onclick="window.location.href='/'">Leave</button>
            </div>
        </div>

        <script>
            const socket = io();
            const canvas = document.getElementById('drawingCanvas');
            const ctx = canvas.getContext('2d');
            const sendButton = document.getElementById('sendButton');
            const clearButton = document.getElementById('clearButton');
            const feedContainer = document.getElementById('feedContainer');
            const feed = document.getElementById('feed');
            const room = "<%= room %>";
            const username = "<%= username %>";

            // Join the assigned room
            socket.emit('joinRoom', room, username);
            let drawing = false;
            let userColor;

            // Retrieve assigned color from server
            socket.on('assignColor', (color) => {
                userColor = color;
            });

            // Draw with assigned color
            canvas.addEventListener('mousemove', (e) => {
                if (!drawing) return;
                ctx.strokeStyle = userColor;
                ctx.lineTo(e.offsetX, e.offsetY);
                ctx.stroke();
            });

            // Start drawing on mousedown
            canvas.addEventListener('mousedown', (e) => {
                drawing = true;
                ctx.beginPath();
                ctx.moveTo(e.offsetX, e.offsetY);
            });

            // Draw on mousemove
            canvas.addEventListener('mousemove', (e) => {
                if (!drawing) return;
                ctx.lineTo(e.offsetX, e.offsetY);
                ctx.stroke();
            });

            // Stop drawing on mouseup
            canvas.addEventListener('mouseup', () => {
                drawing = false;
            });

            // Send the current drawing
            sendButton.addEventListener('click', () => {
                const drawingData = canvas.toDataURL();

                // Emit the drawing data to the server
                socket.emit('sendDrawing', room, drawingData, username);

                // Clear the canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            });

            // Clear the canvas
            clearButton.addEventListener('click', () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            });

            // Add a drawing to the feed
            const addDrawingToFeed = ({ drawingData, username }) => {
                const container = document.createElement('div');
                container.classList.add('drawing');

                const img = document.createElement('img');
                img.src = drawingData;
                img.width = 400; // Scale for feed

                const userLabel = document.createElement('p');
                userLabel.textContent = username;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                container.appendChild(img);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            };

            // Receive existing feed on load
            socket.on('initializeFeed', (existingDrawings) => {
                existingDrawings.forEach(addDrawingToFeed);
            });

            // Receive a new drawing
            socket.on('newDrawing', (drawingData) => {
                addDrawingToFeed(drawingData);
            });

            socket.on('userJoined', (data) => {
                const feed = document.getElementById('feed');
                const container = document.createElement('div');
                const userLabel = document.createElement('p');
                userLabel.textContent = `${data.message} (Total users: ${data.userCount})`;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            });
            socket.on('userLeft', (data) => {
                const feed = document.getElementById('feed');
                const container = document.createElement('div');
                const userLabel = document.createElement('p');
                userLabel.textContent = `${data.message} (Users left: ${data.userCount})`;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            });
        </script>
<%- include("footer.ejs") %>