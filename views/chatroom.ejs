<%- include('header.ejs') %>
    <link rel="stylesheet" href="/css/chatroom.css">
    <script src="https://cdn.socket.io/4.6.1/socket.io.min.js"></script>
    </head>

    <body>
        <div id="feedContainer">
            <div id="feed"></div>
        </div>
        <div id="canvasContainer">
            <canvas id="drawingCanvas" width="350" height="200"></canvas>
            <div id="sideButtons">
                <button id="sendButton">Send</button>
                <button id="clearButton">Clear</button>
                <button id="leaveButton" onclick="window.location.href='/'">Leave</button>
            </div>
        </div>

        <script>
            const socket = io();
            const canvas = document.getElementById('drawingCanvas');
            const ctx = canvas.getContext('2d');
            const sendButton = document.getElementById('sendButton');
            const clearButton = document.getElementById('clearButton');
            const feedContainer = document.getElementById('feedContainer');
            const feed = document.getElementById('feed');
            const room = "<%= room %>";
            const username = "<%= username %>";
            var totalDrawings = 0;

            // Join the assigned room
            socket.emit('joinRoom', room, username);
            let drawing = false;
            let userColor;

            // Retrieve assigned color from server
            socket.on('assignColor', (color) => {
                userColor = color;
            });

            // Draw with assigned color
            canvas.addEventListener('mousemove', (e) => {
                if (!drawing) return;
                ctx.strokeStyle = userColor;
                ctx.lineTo(e.offsetX, e.offsetY);
                ctx.stroke();
            });

            // Start drawing on mousedown
            canvas.addEventListener('mousedown', (e) => {
                drawing = true;
                ctx.beginPath();
                ctx.moveTo(e.offsetX, e.offsetY);
            });

            // Draw on mousemove
            canvas.addEventListener('mousemove', (e) => {
                if (!drawing) return;
                ctx.lineTo(e.offsetX, e.offsetY);
                ctx.stroke();
            });

            // Stop drawing on mouseup
            canvas.addEventListener('mouseup', () => {
                drawing = false;
            });

            function isCanvasBlank(canvas) {
                return !canvas.getContext('2d')
                    .getImageData(0, 0, canvas.width, canvas.height).data
                    .some(channel => channel !== 0);
            }

            // Send the current drawing
            sendButton.addEventListener('click', () => {
                const drawingData = canvas.toDataURL();
                if (totalDrawings >= 50) {
                    feed.removeChild(feed.firstChild);
                } else {
                    totalDrawings++;
                }
                if (isCanvasBlank(canvas)) {
                    return;
                }

                // Emit the drawing data to the server
                socket.emit('sendDrawing', room, drawingData, username);

                // Clear the canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            });

            // Clear the canvas
            clearButton.addEventListener('click', () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            });
            // Add a drawing to the feed
            const addDrawingToFeed = ({ drawingData, username }) => {
                const container = document.createElement('div');
                container.classList.add('drawing');

                const img = document.createElement('img');
                img.src = drawingData;
                img.width = 400; // Scale for feed

                const userLabel = document.createElement('p');
                userLabel.textContent = username;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                container.appendChild(img);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            };

            // Receive existing feed on load
            socket.on('initializeFeed', (existingDrawings) => {
                existingDrawings.forEach(addDrawingToFeed);
            });

            // Receive a new drawing
            socket.on('newDrawing', (drawingData) => {
                addDrawingToFeed(drawingData);
            });

            socket.on('userJoined', (data) => {
                const feed = document.getElementById('feed');
                const container = document.createElement('div');
                const userLabel = document.createElement('p');
                userLabel.textContent = `${data.message} (Total users: ${data.userCount})`;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            });
            socket.on('userLeft', (data) => {
                const feed = document.getElementById('feed');
                const container = document.createElement('div');
                const userLabel = document.createElement('p');
                userLabel.textContent = `${data.message} (Users left: ${data.userCount})`;
                userLabel.classList.add('username');
                container.appendChild(userLabel);
                feed.appendChild(container);

                // Scroll to the bottom of the feed
                feedContainer.scrollTop = feedContainer.scrollHeight;
            });

            // Fetch and display room statistics
            const fetchRoomStats = async () => {
                var roomStatsDiv = document.getElementById('roomStats');
                try {
                    const res = await fetch(`/stats?room=${room}`);
                    const stats = await res.json();

                    // Update room statistics dynamically
                    const roomStatsDiv = document.getElementById('roomStats');
                    roomStatsDiv.innerHTML = `
                        <p>Users in Room:</p>
                        <ul>
                            ${stats.users.map(user => `<li>${user.username}(${user.color})</li>`).join('')}
                        </ul>
                        <p>Total Users in Room: ${stats.userCount}</p>`
                } catch (error) {
                    console.error('Failed to fetch room stats:', error);
                    roomStatsDiv.innerHTML = `<p>Error loading statistics.</p>`;
                }
            };

            // Refresh room stats every 5 seconds
            setInterval(fetchRoomStats, 5000);
        </script>
        <div id="roomStats" style="position: fixed; left: 5px; bottom: 5px; padding: 0; margin: 0;">
            <p>Loading room statistics...</p>
        </div>
        <%- include("footer.ejs") %>